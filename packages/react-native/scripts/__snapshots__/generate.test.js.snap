// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader writeRequires when there are different file extensions writes the story imports 1`] = `
"
  /* do not change this file, it is auto generated by storybook. */
  
  import { start, prepareStories, getProjectAnnotations } from '@storybook/react-native';
  
  import "@storybook/addon-ondevice-notes/register";
import "@storybook/addon-ondevice-controls/register";
import "@storybook/addon-ondevice-backgrounds/register";
import "@storybook/addon-ondevice-actions/register";

  const normalizedStories = [{
      titlePrefix: "",
      directory: "./scripts/mocks/file-extensions",
      files: "FakeStory.stories.tsx",
      importPathMatcher: /^\\.[\\\\/](?:FakeStory\\.stories\\.tsx)$/,
      // @ts-ignore
      req: require.context('./', false, /^\\.[\\\\/](?:FakeStory\\.stories\\.tsx)$/)
    }];

  
    declare global {
      var view: ReturnType<typeof start>;
      var STORIES: typeof normalizedStories;
    }
  

  const annotations = [require('./preview'),require("@storybook/react-native/dist/preview"), require('@storybook/addon-actions/preview')];

  global.STORIES = normalizedStories;
  
  // @ts-ignore
  module?.hot?.accept?.();

  

  if (!global.view) {
    global.view = start({
      annotations,
      storyEntries: normalizedStories,
      
    });
  } else {
    const { importMap } = prepareStories({ storyEntries: normalizedStories,  });
    
    global.view._preview.onStoriesChanged({
      importFn: async (importPath: string) => importMap[importPath],
    });

    global.view._preview.onGetProjectAnnotationsChanged({
      getProjectAnnotations: getProjectAnnotations(global.view, annotations),
    });
  }

  export const view = global.view;
"
`;

exports[`loader writeRequires when there is a configuration object writes the story imports 1`] = `
"
  /* do not change this file, it is auto generated by storybook. */
  
  import { start, prepareStories, getProjectAnnotations } from '@storybook/react-native';
  
  import "@storybook/addon-ondevice-notes/register";
import "@storybook/addon-ondevice-controls/register";
import "@storybook/addon-ondevice-backgrounds/register";
import "@storybook/addon-ondevice-actions/register";

  const normalizedStories = [{
      titlePrefix: "ComponentsPrefix",
      directory: "./scripts/mocks/configuration-objects/components",
      files: "**/*.stories.tsx",
      importPathMatcher: /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.tsx)$/,
      // @ts-ignore
      req: require.context('./components', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.tsx)$/)
    }];

  
    declare global {
      var view: ReturnType<typeof start>;
      var STORIES: typeof normalizedStories;
    }
  

  const annotations = [require('./preview'),require("@storybook/react-native/dist/preview"), require('@storybook/addon-actions/preview')];

  global.STORIES = normalizedStories;
  
  // @ts-ignore
  module?.hot?.accept?.();

  

  if (!global.view) {
    global.view = start({
      annotations,
      storyEntries: normalizedStories,
      
    });
  } else {
    const { importMap } = prepareStories({ storyEntries: normalizedStories,  });
    
    global.view._preview.onStoriesChanged({
      importFn: async (importPath: string) => importMap[importPath],
    });

    global.view._preview.onGetProjectAnnotationsChanged({
      getProjectAnnotations: getProjectAnnotations(global.view, annotations),
    });
  }

  export const view = global.view;
"
`;

exports[`loader writeRequires when there is a story glob writes the story imports 1`] = `
"
  /* do not change this file, it is auto generated by storybook. */
  
  import { start, prepareStories, getProjectAnnotations } from '@storybook/react-native';
  
  import "@storybook/addon-ondevice-notes/register";
import "@storybook/addon-ondevice-controls/register";
import "@storybook/addon-ondevice-backgrounds/register";
import "@storybook/addon-ondevice-actions/register";

  const normalizedStories = [{
      titlePrefix: "",
      directory: "./scripts/mocks/all-config-files",
      files: "FakeStory.stories.tsx",
      importPathMatcher: /^\\.[\\\\/](?:FakeStory\\.stories\\.tsx)$/,
      // @ts-ignore
      req: require.context('./', false, /^\\.[\\\\/](?:FakeStory\\.stories\\.tsx)$/)
    }];

  
    declare global {
      var view: ReturnType<typeof start>;
      var STORIES: typeof normalizedStories;
    }
  

  const annotations = [require('./preview'),require("@storybook/react-native/dist/preview"), require('@storybook/addon-actions/preview')];

  global.STORIES = normalizedStories;
  
  // @ts-ignore
  module?.hot?.accept?.();

  

  if (!global.view) {
    global.view = start({
      annotations,
      storyEntries: normalizedStories,
      
    });
  } else {
    const { importMap } = prepareStories({ storyEntries: normalizedStories,  });
    
    global.view._preview.onStoriesChanged({
      importFn: async (importPath: string) => importMap[importPath],
    });

    global.view._preview.onGetProjectAnnotationsChanged({
      getProjectAnnotations: getProjectAnnotations(global.view, annotations),
    });
  }

  export const view = global.view;
"
`;

exports[`loader writeRequires when there is no preview does not add preview related stuff 1`] = `
"
  /* do not change this file, it is auto generated by storybook. */
  
  import { start, prepareStories, getProjectAnnotations } from '@storybook/react-native';
  
  import "@storybook/addon-ondevice-notes/register";
import "@storybook/addon-ondevice-controls/register";
import "@storybook/addon-ondevice-backgrounds/register";
import "@storybook/addon-ondevice-actions/register";

  const normalizedStories = [{
      titlePrefix: "",
      directory: "./scripts/mocks/no-preview",
      files: "FakeStory.stories.tsx",
      importPathMatcher: /^\\.[\\\\/](?:FakeStory\\.stories\\.tsx)$/,
      // @ts-ignore
      req: require.context('./', false, /^\\.[\\\\/](?:FakeStory\\.stories\\.tsx)$/)
    }];

  
    declare global {
      var view: ReturnType<typeof start>;
      var STORIES: typeof normalizedStories;
    }
  

  const annotations = [require("@storybook/react-native/dist/preview"), require('@storybook/addon-actions/preview')];

  global.STORIES = normalizedStories;
  
  // @ts-ignore
  module?.hot?.accept?.();

  

  if (!global.view) {
    global.view = start({
      annotations,
      storyEntries: normalizedStories,
      
    });
  } else {
    const { importMap } = prepareStories({ storyEntries: normalizedStories,  });
    
    global.view._preview.onStoriesChanged({
      importFn: async (importPath: string) => importMap[importPath],
    });

    global.view._preview.onGetProjectAnnotationsChanged({
      getProjectAnnotations: getProjectAnnotations(global.view, annotations),
    });
  }

  export const view = global.view;
"
`;

exports[`loader writeRequires when using js writes the story imports without types 1`] = `
"
  /* do not change this file, it is auto generated by storybook. */
  
  import { start, prepareStories, getProjectAnnotations } from '@storybook/react-native';
  
  import "@storybook/addon-ondevice-notes/register";
import "@storybook/addon-ondevice-controls/register";
import "@storybook/addon-ondevice-backgrounds/register";
import "@storybook/addon-ondevice-actions/register";

  const normalizedStories = [{
      titlePrefix: "",
      directory: "./scripts/mocks/all-config-files",
      files: "FakeStory.stories.tsx",
      importPathMatcher: /^\\.[\\\\/](?:FakeStory\\.stories\\.tsx)$/,
      
      req: require.context('./', false, /^\\.[\\\\/](?:FakeStory\\.stories\\.tsx)$/)
    }];

  

  const annotations = [require('./preview'),require("@storybook/react-native/dist/preview"), require('@storybook/addon-actions/preview')];

  global.STORIES = normalizedStories;
  
  
  module?.hot?.accept?.();

  

  if (!global.view) {
    global.view = start({
      annotations,
      storyEntries: normalizedStories,
      
    });
  } else {
    const { importMap } = prepareStories({ storyEntries: normalizedStories,  });
    
    global.view._preview.onStoriesChanged({
      importFn: async (importPath) => importMap[importPath],
    });

    global.view._preview.onGetProjectAnnotationsChanged({
      getProjectAnnotations: getProjectAnnotations(global.view, annotations),
    });
  }

  export const view = global.view;
"
`;
