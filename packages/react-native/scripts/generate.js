const { toRequireContext, ensureRelativePathHasDot, getMain } = require('./common');
const { normalizeStories, globToRegexp } = require('@storybook/core-common');
const fs = require('fs');
const prettier = require('prettier');
const path = require('path');
const { getArguments } = require('./handle-args');

const cwd = process.cwd();

function generate({ configPath, absolute = false }) {
  const storybookRequiresLocation = path.resolve(cwd, configPath, 'storybook.requires.js');

  const mainImport = getMain({ configPath });

  const main = mainImport.default ?? mainImport;

  const storiesSpecifiers = normalizeStories(main.stories, {
    configDir: configPath,
    workingDir: cwd,
  });

  const contexts = storiesSpecifiers.map((specifier) => {
    const { path: p, recursive: r, match: m } = toRequireContext(specifier);

    const pathToStory = ensureRelativePathHasDot(path.relative(configPath, p));

    return `{
      root: "${specifier.directory}",
      req: require.context('${pathToStory}', ${r}, ${m})
    }`;
  });

  // TODO refactor contexts and normalized stories to be one thing
  const normalizedStories = storiesSpecifiers.map((specifier) => {
    // TODO why????
    const reg = globToRegexp(`./${specifier.files}`);
    return `{
      titlePrefix: "${specifier.titlePrefix}",
      directory: "${specifier.directory}",
      files: "${specifier.files}",
      importPathMatcher: /${reg.source}/,
    }`;
  });

  const registerAddons = main.addons?.map((addon) => `import "${addon}/register";`).join('\n');

  // TODO: implement presets or something similar
  const enhancer = main.addons?.includes('@storybook/addon-ondevice-actions')
    ? "require('@storybook/addon-actions/dist/preview')"
    : '';
  const annotations = `[require('./preview'), ${enhancer} ]`;

  const fileContent = `
  /* do not change this file, it is auto generated by storybook. */

  import { start } from '@storybook/react-native';
  
  ${registerAddons}

  const normalizedStories = [${normalizedStories.join(',')}]

  global.STORIES = normalizedStories;

  export const view = start({
    stories: [${contexts.join(',')}],
    annotations: ${annotations},
    storyEntries: normalizedStories
  });
`;

  const formattedFileContent = prettier.format(fileContent, { parser: 'babel' });

  fs.writeFileSync(storybookRequiresLocation, formattedFileContent, {
    encoding: 'utf8',
    flag: 'w',
  });
}

module.exports = {
  generate,
};

// TODO evaluate if this is needed
// if (import.meta.webpackHot) {
//   import.meta.webpackHot.accept('./{{storiesFilename}}', () => {
//     // importFn has changed so we need to patch the new one in
//     preview.onStoriesChanged({ importFn });
//   });

//   import.meta.webpackHot.accept([{{#each previewAnnotations}}'{{this}}',{{/each}}], () => {
//     // getProjectAnnotations has changed so we need to patch the new one in
//     preview.onGetProjectAnnotationsChanged({ getProjectAnnotations });
//   });
// }
