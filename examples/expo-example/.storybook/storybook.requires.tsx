/* do not change this file, it is auto generated by storybook. */
console.log('hellooo');
// import {
//   configure,
//   addDecorator,
//   addParameters,
//   addArgsEnhancer,
// } from "@storybook/react-native";
if (__DEV__) {
  const primitiveTypes = ['string', 'number', 'boolean'];
  const logLevels = ['log', 'debug', 'info', 'warn', 'error'];

  const transformArgs = (args) => {
    return args.map((arg) => {
      if (arg === undefined) {
        return 'undefined';
      }
      if (arg instanceof Error) {
        if (arg.stack) {
          return arg.stack;
        }
        return arg.toString();
      }
      if (arg instanceof Date) {
        return arg.toString();
      }
      if (primitiveTypes.includes(typeof arg)) {
        return arg.toString();
      } else {
        return JSON.stringify(arg);
      }
    });
  };

  const consoleProxy = new Proxy(console, {
    get: (target, prop) => {
      //@ts-ignore
      if (logLevels.includes(prop)) {
        return (...args) => {
          // we proxy the call to itself, but we transform the arguments to strings before
          // so that they are printed in the terminal
          return target[prop].apply(this, transformArgs(args));
        };
      }
      return target[prop];
    },
  });

  console = consoleProxy;
}

global.STORIES = [
  {
    titlePrefix: '',
    directory: './components',
    files: '**/*.stories.?(ts|tsx|js|jsx)',
    importPathMatcher:
      '^\\.[\\\\/](?:components(?:\\/(?!\\.)(?:(?:(?!(?:^|\\/)\\.).)*?)\\/|\\/|$)(?!\\.)(?=.)[^/]*?\\.stories\\.(?:ts|tsx|js|jsx)?)$',
  },
  {
    titlePrefix: '',
    directory: './other_components/AnotherButton',
    files: 'AnotherButton.stories.tsx',
    importPathMatcher:
      '^\\.[\\\\/](?:other_components\\/AnotherButton\\/AnotherButton\\.stories\\.tsx)$',
  },
];

import '@storybook/addon-ondevice-notes/register';
import '@storybook/addon-ondevice-controls/register';
import '@storybook/addon-ondevice-knobs/register';
import '@storybook/addon-ondevice-backgrounds/register';
import '@storybook/addon-ondevice-actions/register';

// -- leave above

import { global } from '@storybook/global';
import { PreviewWithSelection } from '@storybook/preview-web';
import {
  // ClientApi,
  // PreviewWeb,
  addons,
  composeConfigs,
} from '@storybook/preview-api';
import { createBrowserChannel } from '@storybook/channels';

async function importFn(importPath) {
  const map = {
    './components/ActionExample/Actions.stories.tsx': require('../components/ActionExample/Actions.stories.tsx'),
    // './components/BackgroundExample/Background.stories.tsx': require('../components/BackgroundExample/Background.stories.tsx'),
    // './components/BackgroundExample/BackgroundCsf.stories.tsx': require('../components/BackgroundExample/BackgroundCsf.stories.tsx'),
    './components/ControlExamples/Array/Array.stories.tsx': require('../components/ControlExamples/Array/Array.stories.tsx'),
    // './components/ControlExamples/Boolean/Boolean.stories.tsx': require('../components/ControlExamples/Boolean/Boolean.stories.tsx'),
    // './components/ControlExamples/Color/Color.stories.tsx': require('../components/ControlExamples/Color/Color.stories.tsx'),
    // './components/ControlExamples/ControlExample/ControlExample.stories.tsx': require('../components/ControlExamples/ControlExample/ControlExample.stories.tsx'),
    // './components/ControlExamples/Date/Date.stories.tsx': require('../components/ControlExamples/Date/Date.stories.tsx'),
    // './components/ControlExamples/Number/Number.stories.tsx': require('../components/ControlExamples/Number/Number.stories.tsx'),
    // './components/ControlExamples/Object/Object.stories.tsx': require('../components/ControlExamples/Object/Object.stories.tsx'),
    // './components/ControlExamples/Radio/Radio.stories.tsx': require('../components/ControlExamples/Radio/Radio.stories.tsx'),
    // './components/ControlExamples/Reproductions/SelectWithNumber.stories.tsx': require('../components/ControlExamples/Reproductions/SelectWithNumber.stories.tsx'),
    // './components/ControlExamples/Select/Select.stories.tsx': require('../components/ControlExamples/Select/Select.stories.tsx'),
    // './components/ControlExamples/Text/Text.stories.tsx': require('../components/ControlExamples/Text/Text.stories.tsx'),
    // './components/InputExample/TextInput.stories.tsx': require('../components/InputExample/TextInput.stories.tsx'),
    // './components/InteractionExample/InteractionExample.stories.tsx': require('../components/InteractionExample/InteractionExample.stories.tsx'),
    // './components/KnobsExample/KnobsExample.stories.js': require('../components/KnobsExample/KnobsExample.stories.js'),
    // './components/NestingExample/ChatMessage.stories.tsx': require('../components/NestingExample/ChatMessage.stories.tsx'),
    // './components/NestingExample/ChatMessageBubble.stories.tsx': require('../components/NestingExample/ChatMessageBubble.stories.tsx'),
    // './components/NestingExample/ChatMessageBubbleAgain.stories.tsx': require('../components/NestingExample/ChatMessageBubbleAgain.stories.tsx'),
    // './components/NestingExample/ChatMessageMessageInput.stories.tsx': require('../components/NestingExample/ChatMessageMessageInput.stories.tsx'),
    // './components/NestingExample/ChatMessageReactions.stories.tsx': require('../components/NestingExample/ChatMessageReactions.stories.tsx'),
    // './components/NestingExample/StoryList.stories.tsx': require('../components/NestingExample/StoryList.stories.tsx'),
    // './components/NotesExample/NotesExample.stories.tsx': require('../components/NotesExample/NotesExample.stories.tsx'),
    // './components/PromiseTest/Button.stories.tsx': require('../components/PromiseTest/Button.stories.tsx'),
    // './components/SafeAreaExample/SafeAreaInside.stories.tsx': require('../components/SafeAreaExample/SafeAreaInside.stories.tsx'),
    // './components/SafeAreaExample/SafeAreaOutside.stories.tsx': require('../components/SafeAreaExample/SafeAreaOutside.stories.tsx'),
    // './components/SafeAreaExample/UsableArea.stories.tsx': require('../components/SafeAreaExample/UsableArea.stories.tsx'),
    // './other_components/AnotherButton/AnotherButton.stories.tsx': require('../other_components/AnotherButton/AnotherButton.stories.tsx'),
  };

  console.trace(importPath);

  return map[importPath];
}

// import { importFn } from './{{storiesFilename}}';
import index from './index.json';

import { View } from '@storybook/react-native/src/preview/View';
import { ReactNativeFramework } from '@storybook/react-native/src/types/types-6.0';

const channel = createBrowserChannel({ page: 'preview' });
addons.setChannel(channel);

// if (global.CONFIG_TYPE === 'DEVELOPMENT') {
//   window.__STORYBOOK_SERVER_CHANNEL__ = channel;
// }

const previewView = {
  prepareForStory: () => {
    return <></>;
  },
  prepareForDocs: () => {},
  showErrorDisplay: (e) => {
    console.log(e);
    console.log('showErrorDisplay');
  },
  showDocs: () => {},
  showMain: () => {},
  showNoPreview: () => {},
  showPreparingDocs: () => {},
  showPreparingStory: () => {},
  showStory: () => {},
  showStoryDuringRender: () => {},
};

const urlStore = {
  selection: null,
  selectionSpecifier: null,
  setQueryParams: () => {},
  setSelection: (selection) => {
    console.log('setSelection');
    preview.selectionStore.selection = selection;
  },
};

const preview = new PreviewWithSelection<ReactNativeFramework>(urlStore, previewView);

const view = new View(preview);

const getProjectAnnotations = async () =>
  composeConfigs<ReactNativeFramework>([
    {
      renderToCanvas: (context) => {
        view._setStory(context.storyContext);
      },
      render: (args, context) => {
        const { id, component: Component } = context;

        if (!Component) {
          throw new Error(
            `Unable to render story ${id} as the component annotation is missing from the default export`
          );
        }

        return <Component {...args} />;
      },
    },
    require('@storybook/addon-actions/dist/preview'),
    require('./preview'),
  ]);

preview.initialize({ importFn, getProjectAnnotations, getStoryIndex: () => index as any });

// if (import.meta.webpackHot) {
//   import.meta.webpackHot.accept('./{{storiesFilename}}', () => {
//     // importFn has changed so we need to patch the new one in
//     preview.onStoriesChanged({ importFn });
//   });

//   import.meta.webpackHot.accept([{{#each previewAnnotations}}'{{this}}',{{/each}}], () => {
//     // getProjectAnnotations has changed so we need to patch the new one in
//     preview.onGetProjectAnnotationsChanged({ getProjectAnnotations });
//   });
// }

view._storyIndex = index;

export { view };
